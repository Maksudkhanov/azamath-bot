const { Telegraf } = require('telegraf')
const validateAnswer = require('./processAnswers/validateAnswers').module;
const checkAnswer = require('./processAnswers/checkTest').module;
const token = require('./token');

const bot = new Telegraf(token)

bot.start(async (ctx) => {
  const userId = ctx.message.chat.id;
  const firstName = ctx.message.chat.first_name

  const message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + firstName + '\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É';
  ctx.telegram.sendMessage(userId, message, startOptions);
})

bot.action('checkTest', async (ctx) => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ—Ç–≤–µ—Ç—ã\n');
  ctx.reply('Lifehack: –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏, –∞ –Ω–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–º–∏');

  bot.on('message', async (ctx) => {
  
    const userId = ctx.message.chat.id;
    const answer = ctx.message.text;
    
    const resultOfValidating = validateAnswer(answer);

    if (resultOfValidating === true) {
      const result = checkAnswer(answer, userId)
      console.log(ctx.message.from);
      return ctx.reply(result, { parse_mode: 'HTML' })
    }

    ctx.reply(resultOfValidating);
  });
  return
});


bot.action('getTest', async (ctx) => {
  await ctx.replyWithDocument({source: 'src/test/–¢–µ—Å—Ç—ã_–Ω–æ–≤–æ–≥–æ_—Ñ–æ—Ä–º–∞—Ç–∞_—á–∞—Å—Ç—å_IV_—Å_–æ—Ç–≤–µ—Ç–∞–º–∏_AzaMath.pdf'});
  ctx.reply('–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç—ã! \n–£–¥–∞—á–∏ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏üòä');
});


const startOptions = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤', callback_data: 'checkTest' },
        { text: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤', callback_data: 'getTest' },
      ],
    ],
  }
};

bot.launch({dropPendingUpdates: true})
